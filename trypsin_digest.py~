######################
#
# 1600607
# Federation
# Input: FASTA file of proteins of interest
# Output: List of peptides generated by enzymatic cleavage
#
#######################



from sys import argv
from Bio import SeqIO




def parseFASTA(fasta_file):

	fasta_sequences = SeqIO.parse(open(fasta_file),'fasta')
	return fasta_sequences
	
def trypsinDigest(sequence, length_cutoff):

	trypticProtSeq = sequence.upper().replace('K','K_').replace('R','R_')##define all Lys, Arg potential cleavage sites as '_'
	length_cutoff = int(length_cutoff)
	
	##special cases for trypsin cleavage with proline at P1'
	trypticProtSeq = trypticProtSeq.replace('_P','P')##if P1' residue (C-terminal to cleavage site) is Proline, remove cleavage site
	trypticProtSeq = trypticProtSeq.replace('WKP','WK_P')##if P1 is K and P2 is W, Proline at P1' will not block cleavage
	trypticProtSeq = trypticProtSeq.replace('MRP','MR_P')##if P1 is R and P2 is M, Proline at P1' will not block cleavage

	##special cases for trypsin cleavage with lysine at P1
	trypticProtSeq = trypticProtSeq.replace('DK_D','DKD')##if P1 is K, P2 is D, and P1' is D, remove cleavage site
	trypticProtSeq = trypticProtSeq.replace('CK_D','CKD')##if P1 is K, P2 is C, and P1' is D, remove cleavage site
	trypticProtSeq = trypticProtSeq.replace('CK_H','CKH')##if P1 is K, P2 is C, and P1' is H, remove cleavage site
	trypticProtSeq = trypticProtSeq.replace('CK_Y','CKY')##if P1 is K, P2 is C, and P1' is Y, remove cleavage site

	##special cases for trypsin cleavage with arginine at P1
	trypticProtSeq = trypticProtSeq.replace('R_R_H','R_RH')##if P1 is R, P2 is R, and P1' is H, remove cleavage site
	##want to keep R_RH but not RR_H
	trypticProtSeq = trypticProtSeq.replace('CR_K','CRK')##if P1 is R, P2 is C, and P1' is K, remove cleavage site
	trypticProtSeq = trypticProtSeq.replace('R_R_R','R_RR')##if P1 is R, P2 is R, and P1' is R, remove cleavage site
	##want to keep R_RR but not RR_R

	trypticPeptides = trypticProtSeq.split('_')##cleave at all sites in protSeq marked by '_'

	#trypticPeptides = filter(lambda x: len(x)>6,trypticPeptides)##only keep tryptic peptides with length > 6
	trypticPeptides = [pep for pep in trypticPeptides if len(pep)>length_cutoff]##only keep tryptic peptides with length > 6

	return trypticPeptides

def write_table(table, output_name, sep):

	fh_out = open(output_name,'w')
	if len(sep) == 0:
		for i in table:
			fh_out.write(str(i))
			fh_out.write('\n')
	else:
		for line in table:
			line = [str(x) for x in line]
			line = sep.join(line)

			fh_out.write(line)
			fh_out.write('\n')

	fh_out.close()

def main():

	if len(argv) < 3:
		print("Usage: trypsin_digest.py [name of fasta file] [minimum length of peptide]")
		return 0

	fasta_file = argv[1]
	length_cutoff = argv[2]

	fasta_sequences = parseFASTA(fasta_file)

	peptides = []

	for fasta in fasta_sequences:  
		sequence = str(fasta.seq)  
		new_peptides = trypsinDigest(sequence, length_cutoff)
		for p in new_peptides:
			if p not in peptides:
				peptides.append(p)

	write_table(peptides, 'tryptic_digest.txt', '')


main()